@model EmailTemplateEditViewModel
@{
    ViewData["Title"] = "E-posta Şablonu Düzenle";
}

<div class="card mb-5">
    <div class="card-body">
        <div class="d-flex flex-wrap flex-stack">
            <div class="d-flex flex-column justify-content-center flex-wrap me-3">
                <h1 class="page-heading d-flex text-dark fw-bold fs-3 flex-column justify-content-center my-0">E-posta
                    Şablonu Düzenle</h1>
                <ul class="breadcrumb breadcrumb-separatorless fw-semibold fs-7 my-0 pt-1">
                    <li class="breadcrumb-item text-muted"><a asp-area="Admin" asp-controller="Home" asp-action="Index"
                            class="text-muted text-hover-primary">Anasayfa</a></li>
                    <li class="breadcrumb-item"><span class="bullet bg-gray-400 w-5px h-2px"></span></li>
                    <li class="breadcrumb-item text-muted"><a asp-area="Admin" asp-controller="EmailTemplate"
                            asp-action="List" class="text-muted text-hover-primary">E-posta Şablonları</a></li>
                    <li class="breadcrumb-item"><span class="bullet bg-gray-400 w-5px h-2px"></span></li>
                    <li class="breadcrumb-item text-dark">Düzenle</li>
                </ul>
            </div>
            <div class="d-flex align-items-center py-1">
                <a asp-area="Admin" asp-controller="EmailTemplate" asp-action="List"
                    class="btn btn-sm btn-light-primary">
                    <i class="ki-duotone ki-arrow-left fs-3"><span class="path1"></span><span class="path2"></span></i>
                    Listeye Geri Dön
                </a>
            </div>
        </div>
    </div>
</div>
<div class="card">
    <div class="card-body">
        <form id="email_template_edit_form" asp-action="Edit" method="post" class="form">
            <input type="hidden" asp-for="Id" />
            <div asp-validation-summary="ModelOnly" class="alert alert-danger"></div>

            <div class="row">
                <div class="col-md-6 fv-row mb-5">
                    <label asp-for="Name" class="required form-label fs-7 fw-semibold"></label>
                    <input asp-for="Name" class="form-control form-control-sm" /> <span asp-validation-for="Name"
                        class="fv-plugins-message-container invalid-feedback fs-8"></span>
                </div>
                <div class="col-md-6 fv-row mb-5">
                    <label asp-for="SystemName" class="form-label fs-7 fw-semibold"></label>
                    <input asp-for="SystemName" class="form-control form-control-sm bg-light" readonly />
                </div>
            </div>
            <div class="fv-row mb-5">
                <label asp-for="Subject" class="required form-label fs-7 fw-semibold"></label>
                <input asp-for="Subject" class="form-control form-control-sm" /> <span asp-validation-for="Subject"
                    class="fv-plugins-message-container invalid-feedback fs-8"></span>
            </div>

            <div class="separator separator-dashed my-8"></div>

            <div class="row">
                <div class="col-md-6 fv-row mb-5">
                    <label asp-for="EmailAccountId" class="required form-label fs-7 fw-semibold"></label>
                    <select asp-for="EmailAccountId" asp-items="Model.AvailableEmailAccounts"
                        class="form-select form-select-sm" data-control="select2"
                        data-placeholder="Bir hesap seçin"></select> <span asp-validation-for="EmailAccountId"
                        class="fv-plugins-message-container invalid-feedback fs-8"></span>
                </div>
                <div class="col-md-6 fv-row mb-5">
                    <label asp-for="BccEmailAddresses" class="form-label fs-7 fw-semibold"></label>
                    <input asp-for="BccEmailAddresses" class="form-control form-control-sm"
                        placeholder="adres1@mail.com, adres2@mail.com" />
                </div>
            </div>

            <div class="separator separator-dashed my-8"></div>

            <div class="mb-5">
                <label class="form-label fs-7 fw-semibold">Kullanılabilir Token'lar:</label>
                <div class="p-4 rounded bg-light-info" id="token_list_container">
                    <div class="d-flex align-items-center">
                        <div class="spinner-border spinner-border-sm text-info" role="status"></div>
                        <span class="text-muted fs-7 ms-3">Token'lar yükleniyor...</span>
                    </div>
                </div>
            </div>

            <div class="fv-row mb-5">
                <label asp-for="Body" class="required form-label fs-7 fw-semibold"></label>
                <textarea asp-for="Body" id="email_body_editor" class="tox-target"></textarea>
                <span asp-validation-for="Body" class="fv-plugins-message-container invalid-feedback fs-8"></span>
            </div>

            <div class="separator separator-dashed my-8"></div>

            <div class="row">
                <div class="col-md-6 fv-row d-flex align-items-center mb-5">
                    <label class="form-check form-switch form-check-custom form-check-solid">
                        <input class="form-check-input" type="checkbox" asp-for="IsActive" />
                        <span class="form-check-label fs-7 fw-semibold">@Html.DisplayNameFor(model =>
                                                        model.IsActive)</span>
                    </label>
                </div>
            </div>

            <div class="d-flex justify-content-end pt-5">
                <a asp-action="List" class="btn btn-sm btn-light me-3">İptal</a>
                <button type="submit" id="email_template_submit_btn" class="btn btn-sm btn-primary">
                    <span class="indicator-label">Değişiklikleri Kaydet</span>
                    <span class="indicator-progress">Lütfen bekleyin... <span
                            class="spinner-border spinner-border-sm align-middle ms-2"></span></span>
                </button>
            </div>
        </form>
    </div>
</div>
@section Scripts {
    <script src="~/assets/plugins/custom/tinymce/tinymce.bundle.js"></script>
    <script type="text/javascript">
        "use strict";
        // Bu script bölümünde herhangi bir değişiklik gerekmemektedir.
        var EmailTemplateEditManager = function () {
            let form, submitButton, validator, editor;

            const initEditor = function () {
                tinymce.init({
                    selector: '#email_body_editor',
                    height: "480",
                    plugins: ["advlist", "autolink", "lists", "link", "image", "charmap", "preview", "anchor", "searchreplace", "visualblocks", "code", "fullscreen", "insertdatetime", "media", "table", "help", "wordcount"],
                    toolbar: "undo redo | blocks | bold italic backcolor | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | removeformat | code | help",
                    setup: function (editorInstance) {
                        editor = editorInstance;
                        editor.on('change', function () {
                            tinymce.triggerSave();
                            validator.revalidateField('Body');
                        });
                    }
                });
            }

            const loadTokens = function () {
                const container = document.querySelector('#token_list_container');
                const systemName = document.querySelector('input[name="SystemName"]').value;
                
                // System name yoksa token yükleme
                if (!systemName) {
                    container.innerHTML = '<span class="text-muted fs-7">System Name bulunamadı. Token\'lar yüklenemiyor.</span>';
                    return;
                }
                
                const url = `/Admin/EmailTemplate/GetTokensForTemplate?systemName=${encodeURIComponent(systemName)}`;
                
                fetch(url)
                    .then(response => response.json())
                    .then(tokens => {
                        container.innerHTML = '';
                        if (tokens && tokens.length > 0) {
                            const tokenWrapper = document.createElement('div');
                            tokenWrapper.classList.add('d-flex', 'flex-wrap', 'gap-2');

                            tokens.forEach(token => {
                                const tokenEl = document.createElement('span');
                                tokenEl.classList.add('badge', 'badge-light-dark', 'fs-8', 'fw-bold');
                                tokenEl.style.cursor = 'pointer';
                                tokenEl.title = 'Kopyalamak için tıkla';
                                tokenEl.innerText = `{{${token}}}`;

                                tokenEl.addEventListener('click', function () {
                                    navigator.clipboard.writeText(this.innerText).then(function () {
                                        toastr.success(`'${token}' panoya kopyalandı!`);
                                    });
                                });
                                tokenWrapper.appendChild(tokenEl);
                            });
                            container.appendChild(tokenWrapper);
                        } else {
                            container.innerHTML = '<span class="text-muted fs-7">Kullanılabilir token bulunamadı.</span>';
                        }
                    })
                    .catch(error => {
                        container.innerHTML = '<span class="text-danger fs-7">Token\'lar yüklenirken bir hata oluştu.</span>';
                        console.error('Token loading error:', error);
                    });
            }

            const initValidation = function () {
                validator = FormValidation.formValidation(form, {
                    fields: {
                        'Name': { validators: { notEmpty: { message: 'Şablon Adı zorunludur.' } } },
                        'Subject': { validators: { notEmpty: { message: 'E-posta Konusu zorunludur.' } } },
                        'Body': { validators: { notEmpty: { message: 'E-posta İçeriği zorunludur.' } } },
                        'EmailAccountId': { validators: { notEmpty: { message: 'Gönderici E-posta Hesabı seçimi zorunludur.' } } },
                    },
                    plugins: {
                        trigger: new FormValidation.plugins.Trigger(),
                        bootstrap: new FormValidation.plugins.Bootstrap5({ rowSelector: '.fv-row', eleInvalidClass: '', eleValidClass: '' }),
                        submitButton: new FormValidation.plugins.SubmitButton(),
                    }
                });
            }

            const handleSubmit = function () {
                submitButton.addEventListener('click', function (e) {
                    e.preventDefault();

                    if (editor) {
                        tinymce.triggerSave();
                    }

                    validator.validate().then(function (status) {
                        if (status == 'Valid') {
                            submitButton.setAttribute('data-kt-indicator', 'on');
                            submitButton.disabled = true;
                            form.submit();
                        } else {
                            Swal.fire({
                                text: "Formda eksik veya hatalı alanlar var, lütfen kontrol edin.",
                                icon: "error",
                                buttonsStyling: false,
                                confirmButtonText: "Tamam",
                                customClass: {
                                    confirmButton: "btn btn-primary"
                                }
                            });
                        }
                    });
                });
            }

            return {
                init: function () {
                    form = document.querySelector('#email_template_edit_form');
                    submitButton = document.querySelector('#email_template_submit_btn');
                    if (!form) { return; }
                    initEditor();
                    loadTokens();
                    initValidation();
                    handleSubmit();
                }
            };
        }();

        KTUtil.onDOMContentLoaded(function () {
            EmailTemplateEditManager.init();
        });
    </script>
}